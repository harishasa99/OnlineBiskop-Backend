const bcrypt = require("bcryptjs");
const User = require("../models/User");
const Movie = require("../models/Movie");

// üìå Dohvatanje korisnika
const getUser = async (req, res) => {
  try {
    console.log("üîç getUser funkcija pozvana sa ID:", req.user?.id);

    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: "Niste autorizovani." });
    }

    const user = await User.findById(req.user.id).select("-password");
    if (!user) {
      console.log("‚ùå Korisnik nije pronaƒëen!");
      return res.status(404).json({ message: "Korisnik nije pronaƒëen" });
    }

    return res.json(user);
  } catch (error) {
    console.error("‚ùå Gre≈°ka pri uƒçitavanju korisnika:", error);
    return res.status(500).json({ message: "Gre≈°ka pri uƒçitavanju korisnika" });
  }
};

// üìå A≈æuriranje korisniƒçkih podataka
const updateUser = async (req, res) => {
  try {
    console.log("üì• Podaci za a≈æuriranje:", req.body);

    const { firstName, lastName, dateOfBirth, gender, favoriteCinema } =
      req.body;

    if (!firstName || !lastName || !dateOfBirth || !gender || !favoriteCinema) {
      return res.status(400).json({ message: "Sva polja su obavezna!" });
    }

    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ message: "Korisnik nije pronaƒëen." });
    }

    user.firstName = firstName;
    user.lastName = lastName;
    user.dateOfBirth = dateOfBirth;
    user.gender = gender;
    user.favoriteCinema = favoriteCinema;

    await user.save();
    console.log("‚úÖ Korisnik uspe≈°no a≈æuriran:", user);

    return res.json(user);
  } catch (error) {
    console.error("‚ùå Gre≈°ka pri a≈æuriranju korisnika:", error);
    return res.status(500).json({ message: "Gre≈°ka pri a≈æuriranju podataka" });
  }
};

// üìå Promena lozinke
const changePassword = async (req, res) => {
  try {
    console.log("üîê Zahtev za promenu lozinke korisnika ID:", req.user.id);

    const { oldPassword, newPassword } = req.body;
    if (!oldPassword || !newPassword) {
      return res.status(400).json({ message: "Unesite staru i novu lozinku!" });
    }

    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ message: "Korisnik nije pronaƒëen!" });
    }

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Stara lozinka nije taƒçna!" });
    }

    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();
    console.log("‚úÖ Lozinka uspe≈°no promenjena!");

    return res.json({ message: "Lozinka uspe≈°no promenjena!" });
  } catch (error) {
    console.error("‚ùå Gre≈°ka pri promeni lozinke:", error);
    return res.status(500).json({ message: "Gre≈°ka pri promeni lozinke!" });
  }
};

// üìå Brisanje naloga
const deleteUser = async (req, res) => {
  try {
    console.log("üóë Brisanje naloga korisnika ID:", req.user.id);

    const user = await User.findByIdAndDelete(req.user.id);
    if (!user) {
      return res.status(404).json({ message: "Korisnik nije pronaƒëen!" });
    }

    console.log("‚úÖ Nalog obrisan:", user.email);
    return res.json({ message: "Nalog uspe≈°no obrisan" });
  } catch (error) {
    console.error("‚ùå Gre≈°ka pri brisanju naloga:", error);
    return res.status(500).json({ message: "Gre≈°ka pri brisanju naloga" });
  }
};

const getFavouriteMovies = async (req, res) => {
  try {
    console.log("üîç Dohvatanje omiljenih filmova za korisnika:", req.user.id);

    const user = await User.findById(req.user.id).populate("favouriteMovies");
    if (!user) {
      return res.status(404).json({ message: "Korisnik nije pronaƒëen" });
    }

    res.json(user.favouriteMovies);
  } catch (error) {
    console.error("‚ùå Gre≈°ka pri dohvatanju omiljenih filmova:", error);
    res
      .status(500)
      .json({ message: "Gre≈°ka pri dohvatanju omiljenih filmova" });
  }
};

const addFavouriteMovie = async (req, res) => {
  try {
    const { movieId } = req.body;
    console.log(
      `‚ûï Dodavanje filma (${movieId}) u omiljene za korisnika:`,
      req.user.id
    );

    // üìå Proveri da li film postoji
    const movie = await Movie.findById(movieId);
    if (!movie) {
      return res.status(404).json({ message: "Film nije pronaƒëen!" });
    }

    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ message: "Korisnik nije pronaƒëen" });
    }

    // üìå Provera da li film veƒá postoji u omiljenima
    if (user.favouriteMovies.includes(movieId)) {
      return res.status(400).json({ message: "Film je veƒá u omiljenima!" });
    }

    // üìå Dodavanje u omiljene
    user.favouriteMovies.push(movieId);
    await user.save();

    res.json({
      message: "Film dodat u omiljene!",
      favouriteMovies: user.favouriteMovies,
    });
  } catch (error) {
    console.error("‚ùå Gre≈°ka pri dodavanju u omiljene:", error);
    res.status(500).json({ message: "Gre≈°ka pri dodavanju u omiljene" });
  }
};

const removeFavouriteMovie = async (req, res) => {
  try {
    const { movieId } = req.params;
    console.log(
      `‚ùå Uklanjanje filma (${movieId}) iz omiljenih za korisnika:`,
      req.user.id
    );

    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ message: "Korisnik nije pronaƒëen" });
    }

    if (!user.favouriteMovies.includes(movieId)) {
      return res.status(400).json({ message: "Film nije u omiljenima!" });
    }

    user.favouriteMovies = user.favouriteMovies.filter(
      (id) => id.toString() !== movieId
    );
    await user.save();

    res.json({
      message: "Film uklonjen iz omiljenih!",
      favouriteMovies: user.favouriteMovies,
    });
  } catch (error) {
    console.error("‚ùå Gre≈°ka pri uklanjanju iz omiljenih:", error);
    res.status(500).json({ message: "Gre≈°ka pri uklanjanju iz omiljenih" });
  }
};

// ‚úÖ Pravilno eksportovanje funkcija
module.exports = {
  getUser,
  updateUser,
  changePassword,
  deleteUser,
  getFavouriteMovies,
  addFavouriteMovie,
  removeFavouriteMovie,
};
